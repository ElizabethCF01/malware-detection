
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Perceptron
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.manifold import TSNE

# Cargar los datos en un DataFrame
data = pd.read_csv('android.csv')
#Eliminar las filas con datos NaN, eso puede cambiar luego
data = data.dropna(how="all")

# transformar las clases para poder graficar, si es malware su valor cambia a 1 y goodware a 0
def conv(v):
  if v == 'malware':
    return 1
  else:
    return 0
data['Label'] = data['Label'].apply(conv)

X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Divide los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)


# Crea y entrena tu modelo de perceptrón
perceptron_model = Perceptron()
perceptron_model.fit(X_train, y_train)

# Realiza predicciones en el conjunto de prueba
y_pred = perceptron_model.predict(X_test)


# Calcula y muestra la precisión
accuracy = accuracy_score(y_test, y_pred)
print(f'Precisión del modelo: {accuracy * 100:.2f}%')


# Muestra el informe de clasificación

class_report = classification_report(y_test, y_pred)
print('Informe de Clasificación:\n', class_report)

X_tsne = TSNE(n_components=3).fit_transform(X)

# Grafica los resultados
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X_tsne[:,0], X_tsne[:,1], X_tsne[:,2], c=y, cmap='viridis')

plt.show()


# Muestra la matriz de confusión

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicción')
plt.ylabel('Verdadero')
plt.title('Matriz de Confusión')
plt.show()


